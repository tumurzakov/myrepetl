#!/usr/bin/env python3
"""
ETL Tool Demo

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ETL Tool.
"""

import sys
import os
import time
import logging
from pathlib import Path

# Add parent directory to path to import ETL modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dsl import (
    ETLPipeline,
    ReplicationSource,
    TargetTable,
    TransformationRule,
    FieldType,
    OperationType,
    uppercase_transform,
    lowercase_transform
)
from utils import ETLConfigManager, ETLValidator, setup_logging


def create_demo_pipeline():
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ETL –ø–∞–π–ø–ª–∞–π–Ω"""
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    # 1. –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
    source = ReplicationSource(
        name="demo_source",
        host="localhost",
        port=3306,
        user="replication_user",
        password="replication_password",
        database="demo_source_db",
        tables=["users", "orders", "products"],
        server_id=100
    )
    
    # 2. –¢–∞–±–ª–∏—Ü—ã-–ø—Ä–∏–µ–º–Ω–∏–∫–∏
    users_table = TargetTable(
        name="users",
        database="demo_target_db"
    ).add_field("name", FieldType.VARCHAR, length=255) \
     .add_field("email", FieldType.VARCHAR, length=255) \
     .add_field("status", FieldType.VARCHAR, length=50) \
     .add_field("created_at", FieldType.DATETIME)
    
    orders_table = TargetTable(
        name="orders",
        database="demo_target_db"
    ).add_field("user_id", FieldType.INTEGER) \
     .add_field("product_id", FieldType.INTEGER) \
     .add_field("amount", FieldType.DECIMAL, length="10,2") \
     .add_field("order_date", FieldType.DATETIME) \
     .add_field("status", FieldType.VARCHAR, length=50)
    
    products_table = TargetTable(
        name="products",
        database="demo_target_db"
    ).add_field("name", FieldType.VARCHAR, length=255) \
     .add_field("description", FieldType.TEXT) \
     .add_field("price", FieldType.DECIMAL, length="10,2") \
     .add_field("category", FieldType.VARCHAR, length=100)
    
    # 3. –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    users_rule = TransformationRule(
        name="users_transform",
        source_table="users",
        target_table="users"
    ).add_mapping("id", "id") \
     .add_mapping("name", "name", uppercase_transform) \
     .add_mapping("email", "email", lowercase_transform) \
     .add_mapping("status", "status") \
     .add_mapping("created_at", "created_at") \
     .add_filter("{status} != 'deleted'")
    
    orders_rule = TransformationRule(
        name="orders_transform",
        source_table="orders",
        target_table="orders"
    ).add_mapping("id", "id") \
     .add_mapping("user_id", "user_id") \
     .add_mapping("product_id", "product_id") \
     .add_mapping("amount", "amount") \
     .add_mapping("order_date", "order_date") \
     .add_mapping("status", "status", uppercase_transform) \
     .add_filter("{amount} > 0")
    
    products_rule = TransformationRule(
        name="products_transform",
        source_table="products",
        target_table="products"
    ).add_mapping("id", "id") \
     .add_mapping("name", "name", uppercase_transform) \
     .add_mapping("description", "description") \
     .add_mapping("price", "price") \
     .add_mapping("category", "category", uppercase_transform)
    
    # 4. ETL –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = ETLPipeline(
        name="demo_etl_pipeline"
    ).add_source(source) \
     .add_target_table(users_table) \
     .add_target_table(orders_table) \
     .add_target_table(products_table) \
     .add_transformation_rule(users_rule) \
     .add_transformation_rule(orders_rule) \
     .add_transformation_rule(products_rule)
    
    print("‚úÖ ETL –ø–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    return pipeline


def validate_pipeline(pipeline):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ETL –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è ETL –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    validator = ETLValidator()
    errors = validator.validate_pipeline(pipeline)
    
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for error in errors:
            print(f"   - {error}")
        return False
    else:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True


def save_pipeline(pipeline):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    config_dir = Path("configs")
    config_dir.mkdir(exist_ok=True)
    
    config_manager = ETLConfigManager(str(config_dir))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    json_file = config_manager.save_pipeline(pipeline, "demo_pipeline.json")
    print(f"   üìÑ JSON: {json_file}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ YAML
    yaml_file = config_manager.save_pipeline_yaml(pipeline, "demo_pipeline.yaml")
    print(f"   üìÑ YAML: {yaml_file}")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


def show_pipeline_info(pipeline):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
    
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ETL –ø–∞–π–ø–ª–∞–π–Ω–µ:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {pipeline.name}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(pipeline.sources)}")
    print(f"   –¢–∞–±–ª–∏—Ü—ã-–ø—Ä–∏–µ–º–Ω–∏–∫–∏: {len(pipeline.target_tables)}")
    print(f"   –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {len(pipeline.transformation_rules)}")
    
    print("\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏:")
    for source in pipeline.sources:
        print(f"   - {source.name}: {source.host}:{source.port}")
        print(f"     –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {source.database}")
        print(f"     –¢–∞–±–ª–∏—Ü—ã: {', '.join(source.tables)}")
    
    print("\nüìã –¢–∞–±–ª–∏—Ü—ã-–ø—Ä–∏–µ–º–Ω–∏–∫–∏:")
    for table in pipeline.target_tables:
        print(f"   - {table.database}.{table.name}")
        print(f"     –ü–æ–ª—è: {len(table.fields)}")
        for field in table.fields:
            print(f"       ‚Ä¢ {field.name} ({field.field_type.value})")
    
    print("\nüîÑ –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    for rule in pipeline.transformation_rules:
        print(f"   - {rule.name}")
        print(f"     {rule.source_table} ‚Üí {rule.target_table}")
        print(f"     –ú–∞–ø–ø–∏–Ω–≥–∏: {len(rule.field_mappings)}")
        print(f"     –§–∏–ª—å—Ç—Ä—ã: {len(rule.filters)}")


def show_usage_examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    
    print("\n1. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ CLI:")
    print("   python -m etl.cli run configs/demo_pipeline.json \\")
    print("       --target-host localhost \\")
    print("       --target-user target_user \\")
    print("       --target-password target_password \\")
    print("       --target-database demo_target_db \\")
    print("       --monitor")
    
    print("\n2. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Python:")
    print("   from etl.engine import ETLEngine")
    print("   etl_engine = ETLEngine(pipeline, target_db_config)")
    print("   etl_engine.start()")
    
    print("\n3. Docker Compose:")
    print("   docker-compose up -d")
    
    print("\n4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print("   python -m etl.cli validate configs/demo_pipeline.json")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    
    print("üéØ ETL Tool Demo")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging("INFO")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline = create_demo_pipeline()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not validate_pipeline(pipeline):
            print("‚ùå –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        save_pipeline(pipeline)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–π–ø–ª–∞–π–Ω–µ
        show_pipeline_info(pipeline)
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        show_usage_examples()
        
        print("\nüéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        print("   - –ò–∑—É—á–∏—Ç–µ README.md")
        print("   - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ –ø–∞–ø–∫–µ examples/")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make help")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        logging.exception("Demo error")
        sys.exit(1)


if __name__ == "__main__":
    main()
